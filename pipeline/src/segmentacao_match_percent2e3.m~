function segmentacao_match_percent2e3(pacientes,medico)

%
% Calcula eficiencia da segmentacao utilizando a metrica descrita em:
% "Statistical Structure Analysis in MRI Brain Tumor Segmentation" - Xiao
% Xuan, Qingmin Liao
%


dir_root = '/home/nex/LSI/Mestrado/implementacao/';


for p=pacientes
    
    paciente = strcat('paciente',int2str(p));
    dir_mascaras = strcat(dir_root,paciente,'/mascaras/');    
    dir_resultados = strcat(dir_root,paciente,'/resultado/');
    nome_arquivo_txt = strcat(dir_root,paciente,'/',paciente,'_medico',int2str(medico),'_resultados_artigo2e3.txt');
    
    arquivo = fopen(nome_arquivo_txt,'w');
    
    fprintf('Processando resultados do %s...\n',paciente);
    
    for s=1:3
        
        nome_mask = strcat(dir_mascaras,paciente,'_mask',int2str(medico),'_',int2str(s),'_2class.bmp');
        nome_result_seg = strcat(dir_resultados,paciente,'_saida_',int2str(s),'_medico',int2str(medico),'_tumor.bmp');
        nome_result_pos = strcat(dir_resultados,paciente,'_saida_',int2str(s),'_medico',int2str(medico),'_tumor_posprocessado.bmp');
        
        %carrega mascara
        mask = imread(nome_mask);
        mask = mask(:,:,1);
        mask(mask == 255) = 0; %so deixa pixeis de tumor na mascara
        
        %carrega segmentacao
        img_seg = imread(nome_result_seg);
        img_seg = img_seg(:,:,1);
        
        %carrega segmentacao posprocessada
        img_pos = imread(nome_result_pos);
        img_pos = img_pos(:,:,1);
        
        
        %pega pixeis do padrao ouro do tumor
        PO = find(mask ~= 0);
        nPO = length(PO);
        
        %segmentacao
        PV_seg = intersect(find(img_seg ~= 0), PO);
        FP_seg = intersect(find(mask == 0),find(img_seg ~= 0));        
        
        nPV_seg = length(PV_seg);
        nFP_seg = length(FP_seg);       
        
        PA_seg = (nPV_seg/nPO)*100;
        TC_seg = (nPV_seg-0.5*nFP_seg)/nPO;

        
        %posprocessamento
        PV_pos = intersect(find(img_pos ~= 0), PO);
        FP_pos = intersect(find(mask == 0),find(img_pos ~= 0));        
        
        nPV_pos = length(PV_pos);
        nFP_pos = length(FP_pos);        
        
        PA_pos = (nPV_pos/nPO)*100;
        TC_pos = (nPV_pos-0.5*nFP_pos)/nPO;
        
        
        %para tirar as medias
        seg.PV(s) = nPV_seg;
        seg.FP(s) = nFP_seg;
        seg.PA(s) = PA_seg;
        seg.TC(s) = TC_seg;
        
        pos.PV(s) = nPV_pos;
        pos.FP(s) = nFP_pos;
        pos.PA(s) = PA_pos;
        pos.TC(s) = TC_pos;
        
        
        %salva arquivo
        fprintf(arquivo,'Fatia %d:\n',s);
        %fprintf(arquivo,'Segmentacao\n');
        %fprintf(arquivo,'#PO = %d #FP = %f #FN = %f CR = %f\n',nPO,FP_s,FN_s,CR_s);
        fprintf(arquivo,'Pos-processamento\n');
        fprintf(arquivo,'#PO = %d #PV = %f #FP = %f PA = %f TC = %f\n\n',nPO,FP_p,FN_p,CR_p);         
        
        
    end
    
        mPV_pos = (pos.PV(1)+pos.PV(2)+pos.PV(3))/3;
        mFP_pos = (pos.FP(1)+pos.FP(2)+pos.FP(3))/3;
        mPA_pos = (pos.PA(1)+pos.PA(2)+pos.PA(3))/3;
        mTC_pos = (pos.TC(1)+pos.TC(2)+pos.TC(3))/3;

        
        %fprintf(arquivo,'MEDIAS SEGMENTACAO:\n FP medio: %f FN medio: %f CR medio: %f\n',mFP_seg,mFN_seg,mCR_seg);
        fprintf(arquivo,'MEDIAS POSPROCESSAMENTO:\n PV: %f FP: %f PA: %f TC: %f',mPV_pos,mFP_pos,mPA_pos,mTC_pos);
    
    fclose(arquivo);    
end