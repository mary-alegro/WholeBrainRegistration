function model = teste1_treina_svm

%
% TESTE 1:
% 3 ptos tumor
% 3 ptos sub. branca
% 3 ptos sub. cinza
% 3 ptos liquor
%

% modalidades
% t1 = 1
% t1c = 2;
% flair = 3;

mod = 2;

dir_root = '/home/nex/LSI/Mestrado/implementacao/teste_T1/';

dados_tumor = [];
dados_normal = [];
  
for p=0:2
    
    p = p+1;
    
    paciente = strcat('paciente',int2str(p-1));
    dir_mascaras = strcat(dir_root,paciente,'/mascaras/');    
    nome_mask1 = strcat(dir_mascaras,paciente,'_mask_1_2class.bmp');
    nome_mask2 = strcat(dir_mascaras,paciente,'_mask_2_2class.bmp');
    nome_mask3 = strcat(dir_mascaras,paciente,'_mask_3_2class.bmp');
    nome_dados = strcat(dir_root,paciente,'/',paciente,'_data2.mat');
    
    %carrega mascaras
    mask(1).m = imread(nome_mask1);
    mask(1).m = mask(1).m(:,:,1);
    mask(2).m = imread(nome_mask2);
    mask(2).m = mask(2).m(:,:,1);
    mask(3).m = imread(nome_mask3);
    mask(3).m = mask(3).m(:,:,1);
    
    %todos os indices
    indices(1).ind = find(mask(1).m ~= 0);
    indices(2).ind = find(mask(2).m ~= 0);
    indices(3).ind = find(mask(3).m ~= 0);
    
    %indices soh de tumor
    indices_tumor(1).ind = find(mask(1).m == 230);
    indices_tumor(2).ind = find(mask(2).m == 230);
    indices_tumor(3).ind = find(mask(3).m == 230);
    
    %indices soh de tecido normal
    indices_normal(1).ind = find(mask(1).m == 255);
    indices_normal(2).ind = find(mask(2).m == 255);
    indices_normal(3).ind = find(mask(3).m == 255);
        
    len_tumor = length(indices_tumor(1).ind)+length(indices_tumor(2).ind)+length(indices_tumor(3).ind);
%     len_normal = length(indices_normal(1).ind)+length(indices_normal(2).ind)+length(indices_normal(3).ind);
    
    
    %aloca vetores
    charac_tumor = zeros(len_tumor,12);
    charac_normal = charac_tumor;
    
    %carrega dados
    dados = load(nome_dados);    
    
    
    %itera fatias
    count = 1;
    count2 = 1;
    
    %itera slices
    for s=1:3
        
        len_t = length(indices_tumor(s).ind);
        len_n = length(indices_normal(s).ind);
        
        for t=1:len_t
            indice_no_vetor = find(indices(s).ind == indices_tumor(s).ind(t));
            charac_tumor(count,1) = dados.struct.mri(mod).s(s).ASM(indice_no_vetor,1);
            charac_tumor(count,2) = dados.struct.mri(mod).s(s).contrast(indice_no_vetor,1);
            charac_tumor(count,3) = dados.struct.mri(mod).s(s).correlation(indice_no_vetor,1);
            charac_tumor(count,4) = dados.struct.mri(mod).s(s).IDM(indice_no_vetor,1);
            charac_tumor(count,5) = dados.struct.mri(mod).s(s).sum_average(indice_no_vetor,1);
            charac_tumor(count,6) = dados.struct.mri(mod).s(s).entropy(indice_no_vetor,1);
            
            charac_tumor(count,7) = dados.struct.mri(mod-1).s(s).ASM(indice_no_vetor,1);
            charac_tumor(count,8) = dados.struct.mri(mod-1).s(s).contrast(indice_no_vetor,1);
            charac_tumor(count,9) = dados.struct.mri(mod-1).s(s).correlation(indice_no_vetor,1);
            charac_tumor(count,10) = dados.struct.mri(mod-1).s(s).IDM(indice_no_vetor,1);
            charac_tumor(count,11) = dados.struct.mri(mod-1).s(s).sum_average(indice_no_vetor,1);
            charac_tumor(count,12) = dados.struct.mri(mod-1).s(s).entropy(indice_no_vetor,1);
            %charac_tumor(count,12) = dados.struct.mri(mod).s(s).diff_entropy(indice_no_vetor,1);
            
            count = count+1;
        end
        
        %calcula indices linearmente espa√ßados
        indices_lin = linspace(1,len_n,len_t);
        indices_lin = round(indices_lin);
        
        for t=indices_lin
            indice_no_vetor = find(indices(s).ind == indices_normal(s).ind(t));
            charac_normal(count2,1) = dados.struct.mri(mod).s(s).ASM(indice_no_vetor,1);
            charac_normal(count2,2) = dados.struct.mri(mod).s(s).contrast(indice_no_vetor,1);
            charac_normal(count2,3) = dados.struct.mri(mod).s(s).correlation(indice_no_vetor,1);
            charac_normal(count2,4) = dados.struct.mri(mod).s(s).IDM(indice_no_vetor,1);
            charac_normal(count2,5) = dados.struct.mri(mod).s(s).sum_average(indice_no_vetor,1);
            charac_normal(count2,6) = dados.struct.mri(mod).s(s).entropy(indice_no_vetor,1);
            
            charac_normal(count2,7) = dados.struct.mri(mod-1).s(s).ASM(indice_no_vetor,1);
            charac_normal(count2,8) = dados.struct.mri(mod-1).s(s).contrast(indice_no_vetor,1);
            charac_normal(count2,9) = dados.struct.mri(mod-1).s(s).correlation(indice_no_vetor,1);
            charac_normal(count2,10) = dados.struct.mri(mod-1).s(s).IDM(indice_no_vetor,1);
            charac_normal(count2,11) = dados.struct.mri(mod-1).s(s).sum_average(indice_no_vetor,1);
            charac_normal(count2,12) = dados.struct.mri(mod-1).s(s).entropy(indice_no_vetor,1);
            
                       charac_normal(count2,7) = dados.struct.mri(mod-1).s(s).ASM(indice_no_vetor,1);
            charac_normal(count2,8) = dados.struct.mri(mod-1).s(s).contrast(indice_no_vetor,1);
            charac_normal(count2,9) = dados.struct.mri(mod-1).s(s).correlation(indice_no_vetor,1);
            charac_normal(count2,10) = dados.struct.mri(mod-1).s(s).IDM(indice_no_vetor,1);
            charac_normal(count2,11) = dados.struct.mri(mod-1).s(s).sum_average(indice_no_vetor,1);
            charac_normal(count2,12) = dados.struct.mri(mod-1).s(s).entropy(indice_no_vetor,1);
            %charac_normal(count2,7) = dados.struct.mri(mod).s(s).intensity(indice_no_vetor,1);         
            
            count2 = count2+1;
        end         
    end
    
    
    %concatena dados tumor
    if isempty(dados_tumor)
        dados_tumor = charac_tumor;
    else
        dados_tumor = cat(1,dados_tumor,charac_tumor);
    end
        
    %concatena dados cerebro
    if isempty(dados_normal)
        dados_normal = charac_normal;
    else
        dados_normal = cat(1,dados_normal,charac_normal);
    end
end 


classe_tumor = -1*ones(size(dados_tumor,1),1);
classe_normal = ones(size(dados_normal,1),1);


treino = cat(1,dados_tumor,dados_normal);
labels = cat(1,classe_tumor,classe_normal);

treino = rescale2(treino);

%faz busca de parametro (isso demora)
%[bestc bestg] = svm_grid_search(labels,treino);
bestc = 8; bestg = 2;

%treina SVM
model = svmtrain(labels,treino,['-t 2 -c' num2str(bestc) '-g ' num2str(bestg)]);
