function segmentacao_match_percent2(pacientes,medico)

%
% Calcula eficiencia da segmentacao utilizando a metrica descrita em:
% "Statistical Structure Analysis in MRI Brain Tumor Segmentation" - Xiao
% Xuan, Qingmin Liao
%

% modalidades
% t1 = 1
% t1c = 2;
% flair = 3;


dir_root = '/home/nex/LSI/Mestrado/implementacao/';


for p=pacientes
    
    paciente = strcat('paciente',int2str(p));
    dir_mascaras = strcat(dir_root,paciente,'/mascaras/');    
    dir_resultados = strcat(dir_root,paciente,'/resultado/');
    nome_arquivo_txt = strcat(dir_root,paciente,'/',paciente,'_medico',int2str(medico),'_resultados_artigo2.txt');
    
    arquivo = fopen(nome_arquivo_txt,'w');
    
    fprintf('Processando resultados do %s...\n',paciente);
    
    for s=1:3
        
        nome_mask = strcat(dir_mascaras,paciente,'_mask',int2str(medico),'_',int2str(s),'_2class.bmp');
        nome_result_seg = strcat(dir_resultados,paciente,'_saida_',int2str(s),'_medico',int2str(medico),'_tumor.bmp');
        nome_result_pos = strcat(dir_resultados,paciente,'_saida_',int2str(s),'_medico',int2str(medico),'_tumor_posprocessado.bmp');
        
        %carrega mascara
        mask = imread(nome_mask);
        mask = mask(:,:,1);
        mask(mask == 255) = 0; %so deixa pixeis de tumor na mascara
        
        %carrega segmentacao
        img_seg = imread(nome_result_seg);
        img_seg = img_seg(:,:,1);
        
        %carrega segmentacao posprocessada
        img_pos = imread(nome_result_pos);
        img_pos = img_pos(:,:,1);
        
        
        %pega pixeis do padrao ouro do tumor
        PO = find(mask ~= 0);
        nPO = length(PO);
        
        %segmentacao
        FP_seg = intersect(find(mask == 0),find(img_seg ~= 0));
        FN_seg = intersect(PO,find(img_seg == 0));
        
        nFP_seg = length(FP_seg);
        nFN_seg = length(FN_seg);
        
        FP_s = nFP_seg/nPO;
        FN_s = nFN_seg/nPO;
        CR_s = FP_s + FN_s;
        
        %posprocessamento
        FP_pos = intersect(find(mask == 0),find(img_pos ~= 0));
        FN_pos = intersect(PO,find(img_pos == 0));
        
        nFP_pos = length(FP_pos);
        nFN_pos = length(FN_pos);
        
        FP_p = nFP_pos/nPO;
        FN_p = nFN_pos/nPO;
        CR_p = FP_p + FN_p;
        
        %para tirar as medias
        seg.FP(s) = FP_s;
        seg.FN(s) = FN_s;
        seg.CR(s) = CR_s;
        
        pos.FP(s) = FP_p;
        pos.FN(s) = FN_p;
        pos.CR(s) = CR_p;
        
        
        %salva arquivo
        fprintf(arquivo,'Fatia %d:\n',s);
        fprintf(arquivo,'Segmentacao\n');
        fprintf(arquivo,'#PO = %d #FP = %f #FN = %f CR = %f\n',nPO,FP_s,FN_s,CR_s);
        fprintf(arquivo,'Pos-processamento\n');
        fprintf(arquivo,'#PO = %d #FP = %f #FN = %f CR = %f\n\n',nPO,FP_p,FN_p,CR_p);         
        
        
    end
    
        mFP_seg = (seg.FP(1) + seg.FP(2) + seg.FP(3))/3;
        mFN_seg = (seg.FN(1) + seg.FN(2) + seg.FN(3))/3;
        mCR_seg = (seg.CR(1) + seg.CR(2) + seg.CR(3))/3;
        
        mFP_pos = (pos.FP(1) + pos.FP(2) + pos.FP(3))/3;
        mFN_pos = (pos.FN(1) + pos.FN(2) + pos.FN(3))/3;
        mCR_pos = (pos.CR(1) + pos.CR(2) + pos.CR(3))/3;
        
        fprintf(arquivo,'SEGMENTACAO:\')
    
    fclose(arquivo);    
end