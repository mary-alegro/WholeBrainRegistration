function transf_mask2block(root_dir)

%
% Used in full brain histology registration.
% Registers the histology slices to their corresponding block face slices.
% Uses mri_robust_register for initial alignment and ANTS for refinement
%
% ROOT_DIR : case base directory
%



ext = '*.tif';
%histo_ext = '*.jpg';

files = dir(strcat(bf_dir,ext));
nFiles = length(files); %blockface and histo files should have the same name.

doMGZ = 0;
doRobustReg = 1;
doANTS = 1;

for f = 1:nFiles
    
    fprintf('\nProcessing %s.\n',files(f).name);
    
    close all;
    
    name = files(f).name;
    idx = strfind(name,'.');
    nii_name = strcat(name(1:idx(1)),'tif');
    out_name = strcat(name(1:idx(1)),'nii.gz');
    
    %------------------
    % convert to MGZ
    %------------------
    if doMGZ == 1
        
        fprintf('Converting images to MGZ...\n');
        
        %set dirs
        tmp_bf_dir = strcat(bf_dir,'mgz/');
        tmp_histo_dir = strcat(histo_dir,'mgz/');
        nii_name = strcat(name(1:idx(1)),'mgz');
        
        %convert blockface
        command = sprintf('mri_convert %s %s', strcat(bf_dir,name), strcat(tmp_bf_dir,nii_name));
        [status_bf, result_bf] = system(command);
        %convert histo
        command = sprintf('mri_convert %s %s', strcat(histo_dir,name), strcat(tmp_histo_dir,nii_name));        
        [status_h, result_h] = system(command);
        
        if status_bf ~=0 || status_h ~= 0
             fprintf('Could no convert %s.\n', name);
             return;
        end       
        
    end
    
    %-------------------------    
    % run mri_robust_register
    %-------------------------
    
    %initial alignment 
    
    %logs what kind of registration method was used
    log_file = strcat(histo_reg_dir,name,'.log'); 
    logfid = fopen(log_file,'w+');
    logstatus = '00';
    
    if doRobustReg == 1  
        
        histo_img = strcat(tmp_histo_dir,nii_name); %histology
        bf_img = strcat(tmp_bf_dir,nii_name); %blockface
        result_img1 = strcat(histo_reg_dir,'mrr_',out_name);
        lta_name = strcat(histo_reg_dir,files(f).name,'.lta');

        %command = sprintf('mri_robust_register --mov %s --dst %s --lta %s --mapmov %s --iscale --satit',histo_img,bf_img,lta_name,result_img1);        
        %command = sprintf('mri_robust_register --mov %s --dst %s --cost ROBENT --radius 7 --satit --iscale --lta %s --mapmov %s  --affine --minsize 130',histo_img,bf_img,lta_name,result_img1);
        command = sprintf('mri_robust_register --mov %s --dst %s --cost ROBENT --satit --iscale --lta %s --mapmov %s --affine',histo_img,bf_img,lta_name,result_img1);
        
        fprintf('Running mri_robust_register...\n');

        [status, result] = system(command);
        if status ~= 0
            fprintf('Error running MRI_ROBUST_REGISTER in file %s.\n', files(f).name);
            disp(result);
            return;
        end
        %convert NIFT to TIFF
        command = sprintf('ConvertImagePixelType %s %s 1', result_img1, strcat(histo_reg_dir,'mrr_',nii_name));
        [status, result] = system(command);
        if status ~= 0
            fprintf('Error converting %s to %s.\n', result_img1, strcat(histo_reg_dir,'mrr_',nii_name));
            disp(result);
            return;
        end
        
        
        
        % Show result    
%         img1 = MRIread(result_img1);
%         img2 = MRIread(bf_img);
%         display_alignment(gscale(img1.vol),gscale(img2.vol));
        
    end
    

        
        
        
    end   

    

    
    %write to logfile
    fprintf(logfid,logstatus);
    fclose(logfid);
    
end


end